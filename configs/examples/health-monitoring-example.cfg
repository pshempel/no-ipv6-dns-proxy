# DNS Proxy with Health-Based Server Selection
# This configuration enables intelligent upstream server selection
# based on real-time health monitoring and performance metrics

[dns-proxy]
listen-port = 53
listen-address = 0.0.0.0
user = dns-proxy
group = dns-proxy

# =====================================================
# HEALTH MONITORING CONFIGURATION
# =====================================================
[health-checks]
# Enable/disable health monitoring
enabled = true

# How often to check server health (seconds)
interval = 30.0

# Query timeout for health checks (seconds)
timeout = 3.0

# Number of consecutive failures before marking unhealthy
failure_threshold = 3

# Number of consecutive successes before marking healthy
recovery_threshold = 2

# =====================================================
# SERVER SELECTION STRATEGY
# =====================================================
[selection]
# Available strategies:
#   round_robin     - Rotate through healthy servers in order
#   lowest_latency  - Always use the fastest responding server
#   weighted        - Random selection based on configured weights
#   failover        - Use primary servers, fallback on failure
#   random          - Random selection from healthy servers
#   least_queries   - Server with fewest queries (load balancing)
strategy = weighted

# =====================================================
# UPSTREAM DNS SERVERS WITH HEALTH MONITORING
# =====================================================

# Primary servers - These handle most queries when healthy
[upstream:cloudflare-primary]
description = Cloudflare Primary - Anycast, great global performance
address = 1.1.1.1
weight = 100        # High weight = more traffic when using weighted strategy
priority = 1        # Priority 1 = primary server for failover strategy
health_check = true # Monitor this server's health
timeout = 2.0       # Fast timeout for good network

[upstream:cloudflare-secondary]
description = Cloudflare Secondary - Backup for primary
address = 1.0.0.1
weight = 100
priority = 1
health_check = true

# Google DNS - Good fallback option
[upstream:google-primary]
description = Google Public DNS - Reliable but may be slower
address = 8.8.8.8
weight = 80         # Slightly lower weight than Cloudflare
priority = 2        # Secondary priority
health_check = true
timeout = 3.0       # Slightly higher timeout

[upstream:google-secondary]
description = Google Public DNS Secondary
address = 8.8.4.4
weight = 80
priority = 2
health_check = true

# Regional/Special Purpose Servers
[upstream:quad9-secure]
description = Quad9 - Security focused, blocks malicious domains
address = 9.9.9.9
weight = 50         # Lower weight - use less frequently
priority = 3        # Tertiary fallback
health_check = true
timeout = 4.0       # Higher timeout for potentially slower response

# Local Network Servers
[upstream:local-pihole]
description = Local Pi-hole - Ad blocking for internal network
address = 192.168.1.10
port = 5353         # Non-standard port
weight = 150        # Prefer local server when healthy (low latency)
priority = 1        # High priority for local queries
health_check = false # Don't health check internal services
timeout = 0.5       # Very fast timeout for local network

# IPv6 Examples
[upstream:cloudflare-ipv6]
description = Cloudflare over IPv6
address = 2606:4700:4700::1111
weight = 100
priority = 1
health_check = true

[upstream:google-ipv6]
description = Google DNS over IPv6
address = 2001:4860:4860::8888
weight = 80
priority = 2
health_check = true

# =====================================================
# MONITORING FEATURES
# =====================================================
# The health monitoring system tracks:
# 
# 1. Server Health Status
#    - Healthy/Unhealthy state
#    - Consecutive failures/successes
#    - Automatic failover when unhealthy
#
# 2. Performance Metrics
#    - Average response time
#    - Success rate percentage
#    - Query distribution
#
# 3. Automatic Recovery
#    - Servers automatically marked healthy when recovered
#    - Gradual traffic restoration
#
# 4. Real-time Adaptation
#    - Adjusts to network conditions
#    - Routes around failures
#    - Optimizes for performance
#
# To view health statistics, query: _dns-proxy-stats.local
# Example: dig TXT _dns-proxy-stats.local @localhost
# =====================================================

[cname-flattener]
max-recursion = 10
remove-aaaa = false

[cache]
max-size = 10000
default-ttl = 300
min-ttl = 60
max-ttl = 86400

[log-file]
log-file = /var/log/dns-proxy/dns-proxy.log
debug-level = INFO
syslog = false